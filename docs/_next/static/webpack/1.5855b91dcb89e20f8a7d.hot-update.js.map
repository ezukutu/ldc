{"version":3,"file":"static/webpack/1.5855b91dcb89e20f8a7d.hot-update.js","sources":["webpack:///./components/HorizontalBarChart/HorizontalBarChart.js"],"sourcesContent":["import React,  { useEffect } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport * as d3 from \"d3\";\nimport { keys } from 'd3-collection';\n\nconst formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\nconst formatPercent = d3.format(\".1%\");\n\nlet slices = ['- >30%', '- 10-30%', '- <10%',\n'Neutral', '+ <10%', '+ 10-30%', '+ >30%'];\n\n// Legend formatting.\nconst tickSize = 0;\nconst legendWidth = 350;\nconst legendHeight = 44 + tickSize;\nconst marginTop = 18;\nconst marginRight = 0;\nconst marginBottom = 16 + tickSize;\nconst marginLeft = 0;\nconst ticks = legendWidth / 64;\nconst title = \"Expected Revenue Change\";\n\n// For wrapping text on the y-axis.\nfunction wrap(text, width) {\n    text.each(function () {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            x = text.attr(\"x\"),\n            y = text.attr(\"y\"),\n            dy = 0, //parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null)\n                        .append(\"tspan\")\n                        .attr(\"x\", x)\n                        .attr(\"y\", y)\n                        .attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                d3.select(this).attr(\"y\", y-2)\n                tspan = text.append(\"tspan\")\n                  .attr(\"x\", x)\n                  .attr(\"y\", y)\n                  .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n                  .text(word);\n            }\n        }\n    });\n};\n\nexport default function HorizontalBarChart(props) {\n  const width = 550;\n  const margin = ({top: 30, right: 10, bottom: 0, left: 50});\n  const height = props.data.length * 25 + margin.top + margin.bottom;\n\n\tuseEffect(() => {\n\t\tlet y = d3.scaleBand()\n\t    .domain(props.data.map(d => d.name))\n\t    .range([margin.top, height - margin.bottom])\n\t    .padding(0.08);\n\n\t\tlet\tx = d3.scaleLinear()\n\t\t    .range([margin.left, width - margin.right]);\n\n\t\tlet yAxis = g => g\n\t    .attr(\"transform\", `translate(${margin.left},0)`)\n\t    .call(d3.axisLeft(y).tickSizeOuter(0))\n\t    .call(g => g.selectAll(\".domain\").remove());\n\n\t\tlet xAxis = g => g\n\t\t\t .attr(\"transform\", `translate(0,${margin.top})`)\n\t\t\t .call(d3.axisTop(x).ticks(width / 100, \"%\"))\n\t\t\t .call(g => g.selectAll(\".domain\").remove());\n\n\t\tlet series = d3.stack()\n\t    .keys(slices)\n\t    .offset(d3.stackOffsetExpand)(props.data)\n\t    .map(d => (d.forEach(v => v.key = d.key), d));\n\n\t\tconst color = d3.scaleOrdinal()\n\t\t\t.domain(slices)\n\t\t\t.range(d3.schemeSpectral[slices.length])\n\t\t\t.unknown(\"#ccc\");\n\n    const chart = d3.select(\"#svg\")\n\t\t\t.attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"display\", \"auto\");\n\t\tchart.attr(\"viewBox\", [0, 0, width, height])\n\t\t\t .style(\"overflow\", \"visible\");\n\t\tchart.append(\"g\")\n\t\t\t .selectAll(\"g\")\n\t\t\t .data(series)\n\t\t\t .enter().append(\"g\")\n\t\t\t   .attr(\"fill\", d => color(d.key))\n\t\t\t .selectAll(\"rect\")\n\t\t\t .data(d => d)\n\t\t\t .join(\"rect\")\n\t\t\t   .attr(\"x\", d => x(d[0]))\n\t\t\t   .attr(\"y\", d => y(d.data.name))\n\t\t\t   .attr(\"width\", d => x(d[1]) - x(d[0]))\n\t\t\t   .attr(\"height\", y.bandwidth())\n\t\t\t .append(\"title\")\n\t\t\t    .text(d => `${d.data.name} ${d.key}\n            ${formatPercent(d[1] - d[0])} (${formatValue(d.data[d.key])})`);\n\n\t  chart.append(\"g\")\n\t     .call(xAxis);\n\t  chart.append(\"g\")\n\t     .call(yAxis)\n       .selectAll(\".tick text\")\n       .call(wrap, 200);\n\n   // Add legend\n\t let x1 = d3.scaleLinear()\n\t     .domain([-1, color.range().length - 1])\n\t     .rangeRound([marginLeft, legendWidth - marginRight]);\n\n\t const thresholds = color.domain();\n\t const legend = d3.select(\"#legend\")\n\t     .attr(\"width\", legendWidth)\n       .attr(\"height\", legendHeight)\n       .attr(\"viewBox\", [0, 0, legendWidth, legendHeight])\n       .style(\"overflow\", \"visible\")\n       .style(\"display\", \"auto\");\n\t let tickFormat;\n\t const thresholdFormat = tickFormat === undefined ? d => d :\n      typeof tickFormat === \"string\" ? d3.format(tickFormat) :\n      tickFormat;\n\n\t legend.append(\"g\")\n\t\t .selectAll(\"rect\")\n\t\t .data(color.range())\n\t\t .join(\"rect\")\n\t\t .attr(\"x\", (d, i) => x1(i - 1))\n\t\t .attr(\"y\", marginTop)\n\t\t .attr(\"width\", (d, i) => x1(i) - x1(i - 1))\n\t\t .attr(\"height\", legendHeight - marginTop - marginBottom)\n\t\t .attr(\"fill\", d => d);\n\n\t let tickValues = d3.range(thresholds.length);\n\t tickFormat = i => thresholdFormat(thresholds[i], i);\n\n\t legend.append(\"g\")\n    .attr(\"transform\", `translate(-27, ${legendHeight - marginBottom})`)\n    .call(d3.axisBottom(x1)\n      .ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n      .tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n      .tickSize(tickSize)\n      .tickValues(tickValues))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.append(\"text\")\n\t\t\t.attr(\"x\", marginLeft + 27)\n      .attr(\"y\", marginTop + marginBottom - legendHeight - 6)\n      .attr(\"text-anchor\", \"start\")\n      .text(title));\n  });\n\n\treturn (\n\t\t      <div>\n            <svg className={\"f\"} id=\"legend\" width={legendWidth} height={legendHeight} /> <br/>\n\t        <svg className={\"horizontalBarChart\"} id=\"svg\" width={width} height={height} />\n        </div>\n\t    );\n\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AANA;AAAA;AAAA;AASA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AAAA;AAGA;AAAA;AAHA;AACA;AAIA;AAAA;AAGA;AAAA;AAHA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAKA;AAIA;AAEA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AAKA;AAIA;AACA;AAMA;AACA;AAAA;AAAA;AAIA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;;;A","sourceRoot":""}