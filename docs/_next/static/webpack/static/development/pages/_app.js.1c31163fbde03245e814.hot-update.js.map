{"version":3,"file":"static/webpack/static/development/pages/_app.js.1c31163fbde03245e814.hot-update.js","sources":["webpack:///./model.js"],"sourcesContent":["/**\n * @fileoverview the model class that stores data and handles all data interactions for the app.\n */\n\nimport * as d3 from \"d3\";\nimport { nest } from 'd3-collection';\nimport Papa from \"papaparse\";\n\nimport { REVCHANGE_CODES, BIZSECTOR_CODES, CHALLENGES_CODES_SHORT, CHALLENGES_KEYS, TIME_OPEN_CODES } from \"helpers/surveycodes.js\";\nimport { COUNTRY_CODES } from \"helpers/countrycodes.js\";\n\nexport default class Model {\n  constructor(all_data) {\n    this.all_data = all_data;\n  }\n\n  get_all_data() {\n  \treturn this.all_data;\n  }\n\n  get_submission_dates() {\n  \treturn this.all_data.map(dict => dict[\"enddate\"]);\n  }\n\n  get_femown_counts() {\n  \tconst femown_counts = {\"1\": 0, \"2\": 0};\n  \tthis.all_data.map(object => {\n  \t  const number = object[\"femown\"];\n  \t  if (number in femown_counts) {\n  \t  \tfemown_counts[number] += 1;\n  \t  }\n  \t});\n  \treturn femown_counts;\n  }\n\n  get_revchange_bizsector_rollup() {\n    var list = [];\n    // Groups rows by business sector and expected\n    // revenue changes.\n    let groups = d3.groups(this.all_data,\n      d => BIZSECTOR_CODES[d.bizsector],\n      d => REVCHANGE_CODES[d.revchange]);\n    for (let key1 of groups) {\n      let obj = new Object();\n      obj.name = key1[0];\n      for (let key2 of key1[1]) {\n        obj[key2[0]] = key2[1].length;\n      }\n      list.push(obj);\n    }\n    // Sorts from largest negative decreases\n    // to largest positive increases.\n    list = list.sort(function(a, b) {\n      let a_sub = a['- >30%'] + a['- 10-30%'] + a['- <10%'];\n      let b_sub = b['- >30%'] + b['- 10-30%'] + b['- <10%'];\n      let a_all = a['- >30%'] + a['- 10-30%'] + a['- <10%'] +\n                  a['Neutral'] + a['+ >30%'] + a['+ 10-30%'] + a['+ <10%'];\n      let b_all = b['- >30%'] + b['- 10-30%'] + b['- <10%'] +\n                  b['Neutral'] + b['+ >30%'] + b['+ 10-30%'] + b['+ <10%'];\n      if ((a_sub / a_all) > (b_sub / b_all)) {\n        return -1;\n      }\n      if ((a_sub / a_all) < (b_sub / b_all)) {\n        return 1;\n      }\n      return 0;\n    });\n    return list;\n  }\n\n  get_country_counts() {\n    var counts = {};\n    let groups = d3.groups(this.all_data,\n      d => COUNTRY_CODES[d.country]);\n    for (let key of groups) {\n      counts[key[0]] = key[1].length;\n    }\n    return counts;\n  }\n\n  get_country_challenges_rollup() {\n    var dict = {};\n    for (let row of this.all_data) {\n      const country = COUNTRY_CODES[row.country];\n      if (!(country in dict)) {\n        dict[country] = {};\n      }\n      for (let challenge of CHALLENGES_KEYS) {\n        const challenge_name = CHALLENGES_CODES_SHORT[challenge];\n        if (!(challenge_name in dict[country])) {\n          dict[country][challenge_name] = 0;\n        }\n        dict[country][challenge_name] += parseInt(row[challenge]);\n      }\n      if (!(\"total\" in dict[country])) {\n        dict[country][\"total\"] = 0;\n      }\n      dict[country][\"total\"] += 1;\n    }\n    return dict;\n  }\n\n  get_country_timeopen_rollup() {\n    var dict = {};\n    for (let row of this.all_data) {\n      const country = COUNTRY_CODES[row.country];\n      if (!(country in dict)) {\n        dict[country] = {};\n      }\n      const code_name = TIME_OPEN_CODES[row.timeopen];\n      if (!(code_name in dict[country])) {\n        dict[country][code_name] = 0;\n      }\n      dict[country][code_name] += 1;\n      if (!(\"total\" in dict[country])) {\n        dict[country][\"total\"] = 0;\n      }\n      dict[country][\"total\"] += 1;\n    }\n    return dict;\n  }\n\n  static from_csv_string(csv_string) {\n    const parsed_result = Papa.parse(csv_string, {\n      header: true, // creates array of {head:value}\n      dynamicTyping: false, // convert values to numbers if possible\n      skipEmptyLines: true\n    });\n   \treturn new Model(parsed_result.data);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AACA;AADA;AAOA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;;;AAEA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;;;AAEA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAKA;AACA;;;;;;;;;;A","sourceRoot":""}