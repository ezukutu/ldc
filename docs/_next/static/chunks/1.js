(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[1],{

/***/ "./components/HorizontalBarChart/HorizontalBarChart.js":
/*!*************************************************************!*\
  !*** ./components/HorizontalBarChart/HorizontalBarChart.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return HorizontalBarChart; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n/* harmony import */ var d3_collection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-collection */ \"./node_modules/d3-collection/src/index.js\");\nvar _jsxFileName = \"/Users/sliu/Documents/covid19ldc/components/HorizontalBarChart/HorizontalBarChart.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\n\nvar formatValue = function formatValue(x) {\n  return isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\n};\n\nvar formatPercent = d3__WEBPACK_IMPORTED_MODULE_2__[\"format\"](\".1%\");\nvar slices = ['- >30%', '- 10-30%', '- <10%', 'Neutral', '+ <10%', '+ 10-30%', '+ >30%']; // Legend formatting.\n\nvar tickSize = 0;\nvar legendWidth = 350;\nvar legendHeight = 44 + tickSize;\nvar marginTop = 18;\nvar marginRight = 0;\nvar marginBottom = 16 + tickSize;\nvar marginLeft = 0;\nvar ticks = legendWidth / 64;\nvar title = \"Expected Revenue Change\"; // For wrapping text on the y-axis.\n\nfunction wrap(text, width) {\n  text.each(function () {\n    var text = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1,\n        // ems\n    x = text.attr(\"x\"),\n        y = text.attr(\"y\"),\n        dy = 0,\n        //parseFloat(text.attr(\"dy\")),\n    tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this).attr(\"y\", y - 2);\n        tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\n;\nfunction HorizontalBarChart(props) {\n  _s();\n\n  var width = 550;\n  var margin = {\n    top: 30,\n    right: 10,\n    bottom: 0,\n    left: 50\n  };\n  var height = props.data.length * 25 + margin.top + margin.bottom;\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    var y = d3__WEBPACK_IMPORTED_MODULE_2__[\"scaleBand\"]().domain(props.data.map(function (d) {\n      return d.name;\n    })).range([margin.top, height - margin.bottom]).padding(0.08);\n    var x = d3__WEBPACK_IMPORTED_MODULE_2__[\"scaleLinear\"]().range([margin.left, width - margin.right]);\n\n    var yAxis = function yAxis(g) {\n      return g.attr(\"transform\", \"translate(\".concat(margin.left, \",0)\")).call(d3__WEBPACK_IMPORTED_MODULE_2__[\"axisLeft\"](y).tickSizeOuter(0)).call(function (g) {\n        return g.selectAll(\".domain\").remove();\n      });\n    };\n\n    var xAxis = function xAxis(g) {\n      return g.attr(\"transform\", \"translate(0,\".concat(margin.top, \")\")).call(d3__WEBPACK_IMPORTED_MODULE_2__[\"axisTop\"](x).ticks(width / 100, \"%\")).call(function (g) {\n        return g.selectAll(\".domain\").remove();\n      });\n    };\n\n    var series = d3__WEBPACK_IMPORTED_MODULE_2__[\"stack\"]().keys(slices).offset(d3__WEBPACK_IMPORTED_MODULE_2__[\"stackOffsetExpand\"])(props.data).map(function (d) {\n      return d.forEach(function (v) {\n        return v.key = d.key;\n      }), d;\n    });\n    var color = d3__WEBPACK_IMPORTED_MODULE_2__[\"scaleOrdinal\"]().domain(slices).range(d3__WEBPACK_IMPORTED_MODULE_2__[\"schemeSpectral\"][slices.length]).unknown(\"#ccc\");\n    var chart = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\"#svg\").attr(\"width\", width).attr(\"height\", height).style(\"display\", \"auto\");\n    chart.attr(\"viewBox\", [0, 0, width, height]).style(\"overflow\", \"visible\");\n    chart.append(\"g\").selectAll(\"g\").data(series).enter().append(\"g\").attr(\"fill\", function (d) {\n      return color(d.key);\n    }).selectAll(\"rect\").data(function (d) {\n      return d;\n    }).join(\"rect\").attr(\"x\", function (d) {\n      return x(d[0]);\n    }).attr(\"y\", function (d) {\n      return y(d.data.name);\n    }).attr(\"width\", function (d) {\n      return x(d[1]) - x(d[0]);\n    }).attr(\"height\", y.bandwidth()).append(\"title\").text(function (d) {\n      return \"\".concat(d.data.name, \" \").concat(d.key, \"\\n            \").concat(formatPercent(d[1] - d[0]), \" (\").concat(formatValue(d.data[d.key]), \")\");\n    });\n    chart.append(\"g\").call(xAxis);\n    chart.append(\"g\").call(yAxis).selectAll(\".tick text\").call(wrap, 200); // Add legend\n\n    var x1 = d3__WEBPACK_IMPORTED_MODULE_2__[\"scaleLinear\"]().domain([-1, color.range().length - 1]).rangeRound([marginLeft, legendWidth - marginRight]);\n    var thresholds = color.domain();\n    var legend = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\"#legend\").attr(\"width\", legendWidth).attr(\"height\", legendHeight).attr(\"viewBox\", [0, 0, legendWidth, legendHeight]).style(\"overflow\", \"visible\").style(\"display\", \"auto\");\n    var tickFormat;\n    var thresholdFormat = tickFormat === undefined ? function (d) {\n      return d;\n    } : typeof tickFormat === \"string\" ? d3__WEBPACK_IMPORTED_MODULE_2__[\"format\"](tickFormat) : tickFormat;\n    legend.append(\"g\").selectAll(\"rect\").data(color.range()).join(\"rect\").attr(\"x\", function (d, i) {\n      return x1(i - 1);\n    }).attr(\"y\", marginTop).attr(\"width\", function (d, i) {\n      return x1(i) - x1(i - 1);\n    }).attr(\"height\", legendHeight - marginTop - marginBottom).attr(\"fill\", function (d) {\n      return d;\n    });\n    var tickValues = d3__WEBPACK_IMPORTED_MODULE_2__[\"range\"](thresholds.length);\n\n    tickFormat = function tickFormat(i) {\n      return thresholdFormat(thresholds[i], i);\n    };\n\n    legend.append(\"g\").attr(\"transform\", \"translate(-27, \".concat(legendHeight - marginBottom, \")\")).call(d3__WEBPACK_IMPORTED_MODULE_2__[\"axisBottom\"](x1).ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined).tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined).tickSize(tickSize).tickValues(tickValues)).call(function (g) {\n      return g.select(\".domain\").remove();\n    }).call(function (g) {\n      return g.append(\"text\").attr(\"x\", marginLeft + 27).attr(\"y\", marginTop + marginBottom - legendHeight - 6).attr(\"text-anchor\", \"start\").text(title);\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 6\n    }\n  }, __jsx(\"svg\", {\n    className: \"f\",\n    id: \"legend\",\n    width: legendWidth,\n    height: legendHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }), \" \", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 89\n    }\n  }), __jsx(\"svg\", {\n    className: \"horizontalBarChart\",\n    id: \"svg\",\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 10\n    }\n  }));\n}\n\n_s(HorizontalBarChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = HorizontalBarChart;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"HorizontalBarChart\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/next/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/HorizontalBarChart/HorizontalBarChart.js\n");

/***/ })

}]);